#Easier Directory Listings with color
export CLICOLOR=1
export LSCOLORS="ExGxBxDxCxEgEdabagacad"
export LS_COLORS="di=94:ln=96:so=91:pi=93:ex=92:bd=94;46:cd=94;103:su=30;41:sg=30;46:tw=30;42:ow=30;103"
#disable quotes around filenames when LS-ing in ubuntu 18
export QUOTING_STYLE=literal

#force xterm so vim colors work when not in tmux too
export TERM=xterm-256color
export LANG=en_US.UTF-8
export EDITOR=vim

# -F applies classification indicators like slashes after a dir, @ for symlink, etc.
# -C column
# --color=auto ensure its using color for the ls
#alias ls='ls --color=auto -FC'
# mac doesn't support --color=auto, so lets try -G instead
alias ls='ls -GFC'
#check if --color will fail, and ignore it if it does.  this is needed so we don't error out on mac, but still get color on linux
ls --color=auto &> /dev/null && alias ls='ls --color=auto -FC' || alias ls='ls -GFC'
# -l list format
# -a all
# -h human readable file sizes (reads as kb, mb, gb, etc)
alias ll='ls -lahF'

#Command line speedtest
#alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'
#i removed this, and just saved the speedtest.py in the dir. no need to download it every time i want to use it.

#remind myself to use nvim
alias vi='echo use nvim or vim!'

#use grep to find files containing string, in current dir
gfind() {
    grep --exclude-dir=storage --exclude-dir=.git --exclude-dir=.next --exclude-dir=node_modules --exclude=vendor --exclude-dir=public -rni "." -e "$1"
}

#manual rsync stuff
# this will pull the initial files from the server
gsyncinit() {
    # if my .gsync file exists, lets load it
    if  [ -f ./.gsync ]; then
        export $(grep -v '^#' .gsync | xargs)
    else
        return 1;
    fi

    currentdir=${PWD##*/}

    # check that its set
    if [ -z "$SYNC_REMOTE_DIR" ]; then
        return 1
    fi
    if [ -z "$SYNC_REMOTE_PATH" ]; then
        return 1
    fi

    # check that our current dir matches the remote
    if [ $currentdir = $SYNC_REMOTE_DIR ]; then
        fullpath="$SYNC_REMOTE_HOST:$SYNC_REMOTE_PATH/$SYNC_REMOTE_DIR/"

        line="==============================================================="
        echo "$line"
        echo "about to pull from: $fullpath"
        echo "$line"
        echo " "

        echo "$line"
        echo "tar compressing remote dir $SYNC_REMOTE_PATH/$SYNC_REMOTE_DIR"
        echo "$line"
        ssh $SYNC_REMOTE_HOST "cd $SYNC_REMOTE_PATH/$SYNC_REMOTE_DIR; tar -czf ../tmp-$SYNC_REMOTE_DIR.tgz ."

        echo "$line"
        echo "copying remote tar locally"
        echo "$line"
        scp $SYNC_REMOTE_HOST:$SYNC_REMOTE_PATH/tmp-$SYNC_REMOTE_DIR.tgz ../

        echo "$line"
        echo "extracting local tar"
        echo "$line"
        tar -xzf ../tmp-$SYNC_REMOTE_DIR.tgz

        echo "$line"
        echo "removing remote tar"
        echo "$line"
        ssh $SYNC_REMOTE_HOST "rm $SYNC_REMOTE_PATH/tmp-$SYNC_REMOTE_DIR.tgz"

        echo "$line"
        echo "removing local tar"
        echo "$line"
        rm ../tmp-$SYNC_REMOTE_DIR.tgz

    else
        echo "$currentdir and $SYNC_REMOTE_DIR dont match...";
    fi

}

# this will pull the changes from the server back to here.
gsyncfetch() {
    # if my .gsync file exists, lets load it
    if  [ -f ./.gsync ]; then
        export $(grep -v '^#' .gsync | xargs)
    else
        return 1;
    fi

    currentdir=${PWD##*/}

    # check that its set
    if [ -z "$SYNC_REMOTE_HOST" ]; then
        return 1
    fi
    if [ -z "$SYNC_REMOTE_DIR" ]; then
        return 1
    fi
    if [ -z "$SYNC_REMOTE_PATH" ]; then
        return 1
    fi

    # check that our current dir matches the remote
    if [ $currentdir = $SYNC_REMOTE_DIR ]; then
        fullpath="$SYNC_REMOTE_HOST:$SYNC_REMOTE_PATH/$SYNC_REMOTE_DIR/"

        echo "about to pull from: $fullpath"
        echo " "


                # -c - use checksum instead of size/time
                # -a - archive (preserve attrributes?)
                # -z - compress (zip?)
                # -P - (same as --partial --progress), keep partial files / show progress
                rsync -cazP \
                    --exclude '.gsync' \
                    --exclude '.next/' \
                    --exclude '.vscode/' \
                    $fullpath ./

    else
        echo "$currentdir and $SYNC_REMOTE_DIR dont match...";
    fi

}

# this will sync my saved changes back to the server (where docker will detect the changes)
gsyncpush() {
    # if my .gsync file exists, lets load it
    if  [ -f ./.gsync ]; then
        export $(grep -v '^#' .gsync | xargs)
    else
        return 1;
    fi

    currentdir=${PWD##*/}

    # check that its set
    if [ -z "$SYNC_REMOTE_HOST" ]; then
        return 1
    fi
    if [ -z "$SYNC_REMOTE_DIR" ]; then
        return 1
    fi
    if [ -z "$SYNC_REMOTE_PATH" ]; then
        return 1
    fi

    # check that our current dir matches the remote
    if [ $currentdir = $SYNC_REMOTE_DIR ]; then
        fullpath="$SYNC_REMOTE_HOST:$SYNC_REMOTE_PATH/$SYNC_REMOTE_DIR/"
        clear
        echo "about to sync to: $fullpath"
        echo " "

        # -c - use checksum instead of size/time
        # -a - archive (preserve attrributes?)
        # -z - compress (zip?)
        # -P - (same as --partial --progress), keep partial files / show progress
        rsync -cazP \
            --exclude '.gsync' \
            --exclude '.DS_Store' \
            --exclude 'node_modules/' \
            --exclude '.next/' \
            --exclude 'tmp/' \
            --exclude '.git/' \
            --exclude '.vscode/' \
            --exclude 'vendor/' \
            --exclude 'storage/' \
            ./ $fullpath

        if [ $? -eq 0 ]; then
            echo " "
            echo "rsync completed successfully!"
        else
            echo " "
            echo "rsync failed, retrying..."
            gsyncpush
        fi
    else
        echo "$currentdir and $SYNC_REMOTE_DIR dont match...";
    fi

    #if [ $currentdir = "app-nestment" ]; then
        #rsync -cazP --exclude '.gsync' --exclude '.DS_Store' --exclude 'node_modules/' --exclude '.next/' --exclude 'tmp/' --exclude 'public/' --exclude '.git/' --exclude '.vscode/' ./ gabedev3:~/dev/app-nestment/
    #fi
    #if [ $currentdir = "api-sanctum" ]; then
        #rsync -cazP --exclude '.gsync' --exclude '.DS_Store' --exclude 'node_modules/' --exclude 'tmp/'  --exclude 'vendor/' --exclude 'storage/' --exclude 'public/' --exclude '.git/' --exclude '.vscode/' ./ gabedev3:~/dev/api-sanctum/
    #fi
}


# this will reset the sync dir, by earasing all the files (except for the .gsync file)
gsyncRESET() {
    # if my .gsync file exists, lets load it
    if  [ -f ./.gsync ]; then
        export $(grep -v '^#' .gsync | xargs)
    else
        return 1;
    fi

    currentdir=${PWD##*/}

    # check that its set
    if [ -z "$SYNC_REMOTE_DIR" ]; then
        return 1
    fi
    if [ -z "$SYNC_REMOTE_PATH" ]; then
        return 1
    fi

    # check that our current dir matches the remote
    if [ $currentdir = $SYNC_REMOTE_DIR ]; then
        fullpath="$SYNC_REMOTE_PATH$SYNC_REMOTE_DIR/"

        echo "About to erase all the files in '$currentdir'!"
        read -r -p "Are you sure? [y/N] " response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
        then
            # this uses find to list all the files in dir, and deletes them all except .gsync file
            find . ! -name .gsync -delete
        else
            echo "operation cancelled. have a nice day..."
        fi
    else
        echo "$currentdir and $SYNC_REMOTE_DIR dont match...";
    fi

}

gsynccreatedotfile() {
    # if .gsync file exists, don't continue
    if  [ -f ./.gsync ]; then
        return 1;
    fi

    touch ./.gsync
    echo "SYNC_REMOTE_HOST=gabedev3" > ./.gsync
    echo "SYNC_REMOTE_PATH=~/dev" >> ./.gsync
    echo "SYNC_REMOTE_DIR=some-dir-name" >> ./.gsync
}

gsynclisten() {
    if  [ -f ./.gsync ]; then
        # Monitor the ./app directory for changes
        clear
        echo "monitoring $PWD for changes..."
        fswatch -o ./ | while read; do
            gsyncpush
        done
    else
        echo "no .gsync file found, exiting..."
        return 1;
    fi
}

#change the MOSH esc seq from ^ to something else
export MOSH_ESCAPE_KEY="~"

# ABILITY TO CHANGE TAB TITLE, WORKS IN HYPER
function title() { echo -e "\033]0;${1:?please specify a title}\007" ; }

# Turn off that damn zsh message on macos.
# I personally still like bash.
export BASH_SILENCE_DEPRECATION_WARNING=1

#git visual tree view similar to source tree
alias treeview='git log --graph --pretty="%C(red)%h %C(white)-%C(yellow)%d %C(white)%s %C(green)(%cr) %C(bold blue)<%an>"'
alias dc-build='docker-compose build --no-cache && yes | docker image prune'
alias dc-up='docker-compose up --force-recreate'

#set tab autocomplete to ingore case
bind 'set completion-ignore-case on'

#CUSTOM PROMPT
# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        #STAT=`parse_git_dirty`
        #echo "[${BRANCH}${STAT}]"
        echo "[${BRANCH}]"
    else
        echo ""
    fi
}
#the prompt, formatted
#export PS1="\n\[\e[35m\][\w]\[\e[m\] \[\e[36m\]\`parse_git_branch\`\[\e[m\]\n\[\e[33m\]<<\u\[\e[m\]@\[\e[33m\]\h>>\[\e[m\] --> "
# not sure why, but i had to add the extra color escape at the end of the prompt,
# because it was messing up on the new bash 5.2.15(1)-release that i was using on my m1pro mac
# my old colored one
# export PS1="\n\[\e[35m\][\w]\[\e[m\] \[\e[36m\]\`parse_git_branch\`\[\e[m\]\n\[\e[33m\]<<\u\[\e[m\]@\[\e[33m\]\h>>\[\e[m\] --> \[\e[m\]"

# the new escaped one from chatgpt
export PS1="\n\[\e[35m\][\w]\[\e[m\] \[\e[36m\]\$(parse_git_branch)\[\e[m\]\n\[\e[33m\]<<\u\[\e[m\]@\[\e[33m\]\h>>\[\e[m\] --> \[\e[m\]"
#export PS1="\n[\w] \`parse_git_branch\`\n<<\u@\h>> --> "
#
#
# color start
# \[\e[34m\]
#
# color end
# \[\e[m\]

